[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins  # this package provides the Palmer Penguins dataset\nimport pandas as pd\nimport seaborn as sns\nfrom shiny import reactive, render, req\n\n\n# use the built in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# names the page\nui.page_opts(title=\"Alvaro's King Penguin data\", fillable=True)\n\n# creates sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    # Creates a dropdown input to choose a column \n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],)\n\n    # Add a second selectize to make scatterplot interactive\n    ui.input_selectize(\n        \"second_selected_attribute\",\n        \"Select Scatterplot Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n\n    # Creates a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 20)\n    \n    # Creates a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 1, 100, 50)\n    \n    # Creates a checkbox group input\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,)\n    \n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Islands\",\n         penguins_df[\"island\"].unique().tolist(),\n        selected=penguins_df[\"island\"].unique().tolist(),\n        inline=True,)\n\n\n      # Adds a horizontal rule to the sidebar\n    ui.hr()\n    \n    # Adds a hyperlink to GitHub Repo\n    ui.a(\n        \"GitHub\",\n         href=\"https://github.com/alvaroquintero28/cintel-02-data/blob/main/app.py\",\n         target=\"_blank\",\n         )\n   \n# create a layout to include 2 cards with a data table and data grid\nwith ui.layout_columns():\n    with ui.card(full_screen=True):  # full_screen option to view expanded table/grid\n        ui.h2(\"Penguin Data Table\")\n\n        @render.data_frame\n        def penguins_datatable():\n            return render.DataTable(filtered_data())\n\n    with ui.card(full_screen=True):  # full_screen option to view expanded table/grid\n        ui.h2(\"Penguin Data Grid\")\n\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(filtered_data())\n\n# added a horizontal rule\nui.hr()\n\n# create a layout to include 3 cards with different plots\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.h2(\"Species Plotly Histogram\")\n\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            )\n\n    with ui.card(full_screen=True):\n        ui.h2(\"Species Seaborn Histogram\")\n\n        @render.plot(alt=\"Species Seaborn Histogram\")\n        def seaborn_histogram():\n            seaborn_plot = sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n                multiple=\"dodge\",\n                hue=\"species\",\n            )\n            seaborn_plot.set_title(\"Species Seaborn Histogram\")\n            seaborn_plot.set_ylabel(\"Measurement\")\n\n    with ui.card(full_screen=True):\n        ui.h2(\"Species Plotly Scatterplot\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                title=\"Plotly Scatterplot\",\n                x=input.selected_attribute(),\n                y=input.second_selected_attribute(),\n                color=\"species\",\n                symbol=\"species\",\n            )\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[(penguins_df[\"species\"].isin(input.selected_species_list())) &\n        (penguins_df[\"island\"].isin(input.selected_island_list()))]\n", "type": "text"}]